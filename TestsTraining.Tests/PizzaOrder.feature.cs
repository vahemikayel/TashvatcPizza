// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.GeneratedTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PizzaOrderFeature : Xunit.IClassFixture<PizzaOrderFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PizzaOrder.feature"
#line hidden
        
        public PizzaOrderFeature(PizzaOrderFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PizzaOrder", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="All arguments passed currently")]
        [Xunit.TraitAttribute("FeatureTitle", "PizzaOrder")]
        [Xunit.TraitAttribute("Description", "All arguments passed currently")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void AllArgumentsPassedCurrently()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All arguments passed currently", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have entered 1000 , 1500 , 1800  into the SetPizzasPricies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Given("I have entered 3 into SetEmployyessCount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "empl",
                        "p1",
                        "p2"});
            table1.AddRow(new string[] {
                        "0",
                        "3",
                        "0"});
            table1.AddRow(new string[] {
                        "1",
                        "1",
                        "1"});
            table1.AddRow(new string[] {
                        "2",
                        "0",
                        "1"});
#line 10
 testRunner.Given("I have entered tuple into SetEmployyeePizzaPairs", ((string)(null)), table1, "Given ");
#line 15
 testRunner.Given("GetTotalPizzaCount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.Given("GetAvergePrice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.And("I have entered 1000 , 1500 , 1800 into the GetAvergePriceFunc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.Then("the result should be 4300 / 3 on the GetAvergePriceFunc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Missing pizzass")]
        [Xunit.TraitAttribute("FeatureTitle", "PizzaOrder")]
        [Xunit.TraitAttribute("Description", "Missing pizzass")]
        public virtual void MissingPizzass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing pizzass", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I have entered 3 into SetEmployyessCount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "empl",
                        "p1",
                        "p2"});
            table2.AddRow(new string[] {
                        "0",
                        "3",
                        "0"});
            table2.AddRow(new string[] {
                        "1",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "2",
                        "0",
                        "1"});
#line 24
 testRunner.Given("I have entered tuple into SetEmployyeePizzaPairs", ((string)(null)), table2, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PizzaOrderFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PizzaOrderFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
